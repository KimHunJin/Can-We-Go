const {GoogleSpreadsheet} = require("google-spreadsheet");
const fs = require("fs");
require('dotenv').config()


function getGoogleSheet() {
    // Initialize the sheet - doc ID is the long id in the sheets URL

    const sheetId = process.env.SHEET_ID;
    const email = process.env.EMAIL;
    const key = process.env.KEY;

    const doc = new GoogleSpreadsheet(sheetId);

    try {
        ( async () => {
            try {
                await doc.useServiceAccountAuth({
                    // env var values are copied from service account credentials generated by google
                    // see "Authentication" section in docs for more info
                    client_email:  email,
                    private_key: key,
                });
                await doc.loadInfo()
                const vaccine = doc.sheetsByTitle['VaccineCrawling']; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
                const preparation = doc.sheetsByTitle['Preparation'];
                const reference = doc.sheetsByTitle['Reference'];
                const exemption = doc.sheetsByTitle['Exemption'];
                const vaccineList = doc.sheetsByTitle['Vaccine'];

                const vaccineRow = await vaccine.getRows();
                const preparationRow = await preparation.getRows();
                const referenceRow = await reference.getRows();
                const exemptionRow = await exemption.getRows();
                const vaccineListRow = await vaccineList.getRows();

                const preparationMap = {};
                const referenceMap = {};
                const exemptionMap = {};
                const vaccineListMap = {};

                preparationRow.forEach(it => {
                    const row = it['_rawData'];
                    const key = row[0];
                    const content = row[1];
                    preparationMap[key] = {
                        id: key,
                        content: content
                    }
                })

                referenceRow.forEach(it => {
                    const row = it['_rawData'];
                    const key = row[0];
                    const content = row[1];
                    referenceMap[key] = {
                        id: key,
                        content: content
                    }
                });

                exemptionRow.forEach(it => {
                    const row = it['_rawData'];
                    const key = row[0];
                    const content = row[1];
                    const url = row[2] ?? '';
                    exemptionMap[key] = {
                        id: key,
                        content: content,
                        url: url
                    }
                })

                vaccineListRow.forEach(it => {
                    const row = it['_rawData'];
                    const key = row[0];
                    const content = row[1];
                    vaccineListMap[key] = {
                        id: key,
                        content: content
                    }
                })

                const vaccineMap = vaccineRow.map((it, index) => {
                    const row = it['_rawData'];
                    const key = index;
                    const continent = row[0];
                    const country = row[1];

                    const _exemptionList = row[2].length > 0 ? row[2] : null;
                    const _preparationList = row[3].length > 0 ? row[3] : null;
                    const _referenceList = row[4].length > 0 ? row[4] : null;

                    const exemptionList = _exemptionList?.split(',')?.map(it => {
                        return exemptionMap[it];
                    }) ?? [];
                    const preparationList = _preparationList?.split(',')?.map(it => {
                        return preparationMap[it];
                    }) ?? [];
                    const referenceList = _referenceList?.split(',')?.map(it => {
                        return referenceMap[it];
                    }) ?? [];
                    const officeUrl = row[5] ?? '';
                    const image = row[6] ?? '';
                    const updateDate = row[7] ?? new Date();

                    const _vaccineList = row[8].length > 0 ? row[8] : null;
                    const vaccineList = _vaccineList?.split(',')?.map(it => {
                        return vaccineListMap[it];
                    }) ?? [];

                    return {
                        key,
                        continent,
                        country,
                        exemptionList,
                        preparationList,
                        referenceList,
                        officeUrl,
                        image,
                        updateDate,
                        vaccineList
                    }
                });

                const json = {
                    preparation: preparationMap,
                    reference: referenceMap,
                    exemption: exemptionMap,
                    vaccine: vaccineListMap,
                    main: vaccineMap
                }

                fs.writeFile('content/index.json', JSON.stringify(json), { flag: 'w+' }, function (err) {
                    if (err) return console.error(err);
                });

            } catch (e) {
                console.error(e);
            }
        })();
    } catch(e) {
        console.error(e)
    }

    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication

}

getGoogleSheet();